import{B as O,C as L,a as F,b as U,c as M,d as H,e as P,f as _,g as B,h as q,m as e,n,o as I,p as x,q as E,r as N,t as D,u as T,v as C}from"./shared.js";import{desktopConfig as se}from"lighthouse";var J={title:"Elements are configured to ignore rage or dead clicks",failureTitle:"No elements have been configured to ignore rage or dead clicks",description:"Prevent results returned from FullStory frustration signals like rage or dead clicks from being false positives. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020622734-Prevent-elements-from-being-classified-as-Rage-or-Dead-Clicks-via-FullStory-Settings-or-via-code) to ignore rage and dead click elements from being incorreclty classified.",labels:{selector:"Selector"}},m=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("behavior-signals",J)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{BehaviorSignalSettings:{ElementBlocks:r}}}=i,s=r?r.map(o=>({selector:o.Selector})):[];return{score:s.length>0?1:0,details:n.makeDetails(["selector"],s)}}};var z={title:"Console data capture is on",failureTitle:"Console data capture is off",description:"Toggle console data capture to on to capture JavaScript console logs and exceptions."},p=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("data-capture-console",z)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{ConsoleWatcherEnabled:r}}=i;return{score:r?1:0}}};var j={title:"Capture is configured for specific domains ",failureTitle:"No specific domains are configured for capture",description:"Prevent excessive quota usage due to unintentional capture - often from test or staging environments. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020827533-Can-I-disable-data-capture-for-a-specific-domain-) to configure capture for specific domains.",labels:{domain:"Domain"}},f=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("domain-capture",j)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{Domains:{Domains:r}}}=i,s=r?r.map(o=>({domain:o})):[];return{score:s.length>0?1:0,details:n.makeDetails(["domain"],s)}}};var G={title:"Element data capture rules are configured",failureTitle:"Additional element data capture rules are recommended",description:"Element data capture rules control what information is sent to FullStory and how it will be visualized in session replay. While FullStory provides several default rules, rules specific to your organization's privacy preferences should be added. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020623574-How-do-I-protect-my-users-privacy-in-FullStory-) to learn about protecting users' privacy.",explanations:{numRules:"{numRules} rules added"}},g=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("element-capture-rules",G)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{ElementBlocks:r}}=i,s=r.map(o=>({selector:o.Selector}));return{score:r.length>17?1:0,details:n.makeDetails(["selector"],s),explanation:e.makeExplanation("numRules",G,{numRules:r.length-17})}}};var W={title:"Form privacy is on",failureTitle:"Form privacy is off",description:"[Form privacy](https://help.fullstory.com/hc/en-us/articles/4408633932439-Form-Privacy) helps ensure the content a user enters on your website or app is kept private. Exceptions may be added for elements that don\u2019t contain sensitive data.",explanations:{pbd:"[private by default](https://help.fullstory.com/hc/en-us/articles/360044349073-FullStory-Private-by-Default) is on"}},h=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("form-privacy",W)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{ElementBlocks:r}}=i,s=r.filter(a=>a.Type===2&&a.Selector==="html"),o=r.filter(a=>a.Type===3&&a.Selector==="body"),t=r.filter(a=>a.Type===1||a.Type===2).filter(a=>["input","textarea","select","[contenteditable]","input[type=radio]","input[type=checkbox]"].findIndex(d=>d===a.Selector)!==-1);return{score:s&&!o||t.length===6?1:0,explanation:s&&!o?e.makeExplanation("pbd",W):void 0}}};var K={title:"Element attributes can be indexed",failureTitle:"No element attributes available to index",description:"Lists element attributes that may be important to your site. Count displays the number of elements with the attribute. Score measures distinctness computed as (unique attribute values) / (count of attributes). Elements that have attributes with scores closer to 1.00 are more distinct than elements with the same tag name and classes. Attributes that are indexed by default will also be listed. When creating an indexing rule, use a wildcard (*) to capture the attribute for any value. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360052608053-Using-Element-Attributes-in-Search-Page-Analytics#h_01EM24SA19T0BKVHBHWYG61D1S) for more on element attribute indexing."},A=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("indexed-attributes",K)}}static audit(i){let{ElementAttributes:r}=i,o=Object.values(r).filter(t=>!C.BlockedAttributes.includes(t.name)).filter(t=>C.IndexedAttributes.includes(t.name)||t.name.startsWith("data")).filter(t=>t.values,this.length!==0).filter(t=>t.values.length>1).filter(t=>t.count>1).filter(t=>!t.values.every(a=>a.startsWith("{"))).sort((t,a)=>t.name.localeCompare(a.name)).map(t=>({default:C.IndexedAttributes.includes(t.name)?"Yes":"",name:t.name,count:t.count,score:t.values.length/t.count,subItems:{type:"subitems",items:[{value:t.values.length>10?`${t.values.slice(0,10).join(", ")},... (${t.values.length-10} more)`:t.values.join(", ")}]}}));return{score:o.length>0?1:0,details:e.makeTableDetails([n.makeHeading("default"),{key:"name",valueType:"text",label:"Attribute",subItemsHeading:{key:"value",valueType:"text"}},n.makeHeading("count"),n.makeHeading("score")],o)}}};var V={title:"Integrations for web are enabled",failureTitle:"No integrations for web are enabled",description:"Several supported integrations are provided by FullStory and require little to no technical assistance to enable. For a complete list of supported integrations, see the [FullStory Help Center](https://help.fullstory.com/hc/en-us/categories/360001589654-Integrations).",labels:{name:"Name",status:"Status"}},y=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("integrations-managed",V)}}static audit(i){let{Integrations:r}=i,s=Object.values(r).map(({name:o,enabled:t})=>({name:o,status:t?"On":"Off"}));return{score:s.length>0?1:0,details:n.makeDetails(["name","status"],s)}}};var Z={title:"Capture is restricted to allowed domains",failureTitle:"Restrict capture to allowed domains",description:"Restricing capture to allowed domains prevents excessive quota usage due to unintentional capture. Additionally, personal or sensitive information may be captured if the snippet is added to a new domain and the appropriate [Element Capture Rules](https://help.fullstory.com/hc/en-us/articles/360020623574-How-do-I-protect-my-users-privacy-in-FullStory-#01F5DPW1AJ2DWJZKTJ8EH12R5X) have not been created. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020827533-Can-I-disable-data-capture-for-a-specific-domain-#all-other-domains) to disable capture for unconfigured domains."},S=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("domain-capture-known",Z)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{Domains:r}}=i;return{score:r.OnlyKnownDomains?1:0}}};var Q={title:"Network requests have been allowlisted",failureTitle:"No network requests have been allowlisted",description:"Network requests matching URL patterns can have their request and response bodies captured, which is often used to troubleshoot technical issues. Specfic JSON fields can be allowed to limit capture. This data will be visible in Dev Tools as part of the network request detail pane. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020828393) to configure network allowlists.",labels:{pattern:"URL Pattern",request:"Request Capture",response:"Response Capture"}},w=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("network-allowlist",Q)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{AjaxWatches:r}}=i,s=r.map(o=>{let{RecordReq:t,RecordRsp:a,ReqAllowlist:l,RspAllowlist:d,URLRegex:c}=o;return{regex:c,requestAllowlist:t===2?l:t===1?"Full Body":"Nothing",responseAllowlist:a===2?d:a===1?"Full Body":"Nothing"}});return{score:r.length>0?1:0,details:n.makeDetails(["regex","requestAllowlist","responseAllowlist"],s)}}};var ee={title:"Network data capture is on",failureTitle:"Network data capture is off",description:"Toggle network data capture to on to capture network request details."},b=class extends e{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("data-capture-network",ee)}}static audit(i){if(!e.hasCaptureSettings(i))return e.NOT_APPLICABLE_CAPTURE_OFF;let{OrgSettings:{AjaxWatcherEnabled:r}}=i;return{score:r?1:0}}};import{EntityClassification as re}from"lighthouse/core/computed/entity-classification.js";function R(i,r="",s=[]){if(!i)return[];try{let o=Object.getOwnPropertyNames(i);for(let t of o)if(typeof i[t]=="object"&&!Array.isArray(i[t]))R(i[t],r?`${r}/${t}`:t,s);else{let a=Array.isArray(i[t])&&typeof i[t]=="object"?"[Array of Objects]":i[t];s.push(r?`${r}/${t}=${a}`:`${t}=${a}`)}}catch{console.warn("Failed to itemize fields for object",i)}return s}import te from"lighthouse-logger";import ie from"lighthouse/core/lib/url-utils.js";var u=class extends e{static headings=[{...n.makeHeading("url"),subItemsHeading:{key:"field",valueType:"text"}},{...n.makeHeading("statusCode")}];static makeTableItem(r,s){let{statusCode:o,url:t}=r;return{url:ie.elideDataURI(t),statusCode:o,subItems:{type:"subitems",items:s.map(a=>({field:a}))}}}static parse(r){try{return JSON.parse(r)}catch{return te.warn("Failed to JSON.parse",r),{}}}};var X={title:"Network requests can be allowlisted",failureTitle:"No network requests or request bodies to allowlist",description:"Lists first-party XHR and fetch network requests. Request bodies can be optionally allowlisted to provide more information that aids technical troubleshooting. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020828393) to configure network allowlists.",explanations:{none:"no requests"}},v=class extends u{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("xhr-network-requests",X)}}static async audit(i,r){let s=i.devtoolsLogs[e.DEFAULT_PASS],o=await re.request({URL:i.URL,devtoolsLog:s},r),{XhrNetwork:t}=i,a=t.filter(l=>o.isFirstParty(l.url)).filter(l=>{let d=u.parse(l.postData);return Object.keys(d).length>0}).map(l=>{let d=u.parse(l.postData),c=Array.isArray(d)?[]:R(d);return u.makeTableItem(l,c)});return{score:a.length?1:.5,explanation:a.length===0?e.makeExplanation("none",X):void 0,details:e.makeTableDetails(u.headings,a)}}};import{EntityClassification as ae}from"lighthouse/core/computed/entity-classification.js";var $={title:"Network responses can be allowlisted",failureTitle:"No network responses or response bodies to allowlist",description:"Lists first-party XHR and fetch network responses. Response bodies can be optionally allowlisted to provide more information that aids technical troubleshooting. Review the [FullStory Help Center](https://help.fullstory.com/hc/en-us/articles/360020828393) to configure network allowlists.",explanations:{none:"no responses"}},k=class extends u{static get meta(){return{scoreDisplayMode:e.SCORING_MODES.BINARY,...e.createMeta("xhr-network-responses",$)}}static async audit(i,r){let s=i.devtoolsLogs[e.DEFAULT_PASS],o=await ae.request({URL:i.URL,devtoolsLog:s},r),{XhrNetwork:t}=i,a=t.filter(l=>o.isFirstParty(l.url)).filter(l=>{let d=u.parse(l.postData);return Object.keys(d).length>0}).map(l=>{let d=u.parse(l.response),c=Array.isArray(d)?[]:R(d);return u.makeTableItem(l,c)});return{score:a.length?1:.5,explanation:a.length===0?e.makeExplanation("none",$):void 0,details:e.makeTableDetails(u.headings,a)}}};var Yt={extends:"lighthouse:default",settings:{...se.settings,pauseAfterLoadMs:1e4},artifacts:[{id:"OrgSettings",gatherer:{implementation:P}},{id:"DataLayers",gatherer:{implementation:q}},{id:"ElementAttributes",gatherer:{implementation:F}},{id:"Integrations",gatherer:{implementation:H}},{id:"NamedElements",gatherer:{implementation:U}},{id:"WatchedElements",gatherer:{implementation:M}},{id:"WindowVars",gatherer:{implementation:_}},{id:"XhrNetwork",gatherer:{implementation:B}}],audits:["first-contentful-paint",{implementation:m},{implementation:p},{implementation:I},{implementation:x},{implementation:E},{implementation:N},{implementation:b},{implementation:g},{implementation:h},{implementation:f},{implementation:S},{implementation:A},{implementation:y},{implementation:D},{implementation:w},{implementation:T},{implementation:O},{implementation:L},{implementation:v},{implementation:k}],groups:{"element-attributes":{title:"Element Attribute Indexing",description:"The Element Attribute feature allows you to take advantage of more stable attributes on your selectors, even while the class names constantly change. You can select key Element Attributes to index so that you can search for future sessions where users interacted with those elements with the element attribute in question."},elements:{title:"Elements",description:"Naming Elements lets you assign your own names to complex elements like CSS selectors. This helps make your FullStory data more meaningful and easy to understand. Watching elements in FullStory helps you determine if an element rendered on the page and if it was visible in the user\u2019s viewport."},"data-layer":{title:"Data Layer",description:"FullStory data layer capture technology is designed to automatically capture common data layer attributes and make them available in FullStory as custom events or user variables."},network:{title:"Network",description:"FullStory Dev Tools gives you the power to capture Request Headers, Response Headers, Request Bodies and Response Bodies for individual Network Requests that took place within a user's captured session."},integrations:{title:"Integrations",description:""}},categories:{performance:{title:"Performance",auditRefs:[{id:"first-contentful-paint",weight:77}]},"data-capture":{title:"Data Capture",auditRefs:[{id:f.meta.id,weight:.5},{id:S.meta.id,weight:.15},{id:p.meta.id,weight:.4},{id:b.meta.id,weight:.4}]},privacy:{title:"Privacy",auditRefs:[{id:h.meta.id,weight:20},{id:g.meta.id,weight:70},{id:w.meta.id,weight:10},{id:v.meta.id},{id:k.meta.id}]},"data-management":{title:"Data Management",auditRefs:[{id:m.meta.id,weight:.1},{id:A.meta.id,weight:.7},{id:D.meta.id},{id:T.meta.id}]},integrations:{title:"Integrations",auditRefs:[{id:I.meta.id},{id:x.meta.id},{id:E.meta.id},{id:N.meta.id},{id:y.meta.id,weight:1},{id:O.meta.id},{id:L.meta.id}]}}};export{Yt as default};
